[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practicals",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "PracticalOne.html",
    "href": "PracticalOne.html",
    "title": "Practical One",
    "section": "",
    "text": "Code\naq_data &lt;- airquality\n\n#Counts how many rows have any column with an NA value\nprint(\"Number of rows with NA values\")\n\n\n[1] \"Number of rows with NA values\"\n\n\nCode\nsum(rowSums(is.na(aq_data)) &gt; 0)\n\n\n[1] 42\n\n\nCode\n#Find the location of missing values\nprint(\"Position of the missing values\")\n\n\n[1] \"Position of the missing values\"\n\n\nCode\nwhich(is.na(aq_data))\n\n\n [1]   5  10  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52  53  54\n[20]  55  56  57  58  59  60  61  65  72  75  83  84 102 103 107 115 119 150 158\n[39] 159 164 180 249 250 251\n\n\nCode\n# count total missing values \nprint(\"Count of total missing values  \")\n\n\n[1] \"Count of total missing values  \"\n\n\nCode\nsum(is.na(aq_data))\n\n\n[1] 44"
  },
  {
    "objectID": "PracticalOne.html#question-1",
    "href": "PracticalOne.html#question-1",
    "title": "Practical One",
    "section": "",
    "text": "Code\naq_data &lt;- airquality\n\n#Counts how many rows have any column with an NA value\nprint(\"Number of rows with NA values\")\n\n\n[1] \"Number of rows with NA values\"\n\n\nCode\nsum(rowSums(is.na(aq_data)) &gt; 0)\n\n\n[1] 42\n\n\nCode\n#Find the location of missing values\nprint(\"Position of the missing values\")\n\n\n[1] \"Position of the missing values\"\n\n\nCode\nwhich(is.na(aq_data))\n\n\n [1]   5  10  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52  53  54\n[20]  55  56  57  58  59  60  61  65  72  75  83  84 102 103 107 115 119 150 158\n[39] 159 164 180 249 250 251\n\n\nCode\n# count total missing values \nprint(\"Count of total missing values  \")\n\n\n[1] \"Count of total missing values  \"\n\n\nCode\nsum(is.na(aq_data))\n\n\n[1] 44"
  },
  {
    "objectID": "PracticalOne.html#question-2",
    "href": "PracticalOne.html#question-2",
    "title": "Practical One",
    "section": "Question 2",
    "text": "Question 2\n\nFind mean, sd, min, max for each of temperature and ozone level.\n\n\nCode\n#Find the mean of Temperature\nprint(\"The mean temperature is:\")\n\n\n[1] \"The mean temperature is:\"\n\n\nCode\nmean(aq_data$Temp)\n\n\n[1] 77.88235\n\n\nCode\n#Find the sd of Temperature\nprint(\"The standard deviation of temperature is:\")\n\n\n[1] \"The standard deviation of temperature is:\"\n\n\nCode\nsd(aq_data$Temp)\n\n\n[1] 9.46527\n\n\nCode\n#Find the min Temperature\nprint(\"The minimum temperature is:\")\n\n\n[1] \"The minimum temperature is:\"\n\n\nCode\nmin(aq_data$Temp)\n\n\n[1] 56\n\n\nCode\n#Find the max Temperature\nprint(\"The maximum temperature is:\")\n\n\n[1] \"The maximum temperature is:\"\n\n\nCode\nmax(aq_data$Temp)\n\n\n[1] 97\n\n\nCode\n#############################################\n\n#Find the mean of ozone level\nprint(\"The mean ozone level is:\")\n\n\n[1] \"The mean ozone level is:\"\n\n\nCode\nmean(aq_data$Ozone, na.rm = TRUE)\n\n\n[1] 42.12931\n\n\nCode\n#Find the sd of ozone level\nprint(\"The standard deviation of ozone level is:\")\n\n\n[1] \"The standard deviation of ozone level is:\"\n\n\nCode\nsd(aq_data$Ozone, na.rm = TRUE)\n\n\n[1] 32.98788\n\n\nCode\n#Find the min ozone level\nprint(\"The minimum ozone level is:\")\n\n\n[1] \"The minimum ozone level is:\"\n\n\nCode\nmin(aq_data$Ozone, na.rm = TRUE)\n\n\n[1] 1\n\n\nCode\n#Find the max ozone level\nprint(\"The maximum ozone level is:\")\n\n\n[1] \"The maximum ozone level is:\"\n\n\nCode\nmax(aq_data$Ozone, na.rm = TRUE)\n\n\n[1] 168"
  },
  {
    "objectID": "PracticalOne.html#question-3",
    "href": "PracticalOne.html#question-3",
    "title": "Practical One",
    "section": "Question 3",
    "text": "Question 3\n\nFit a simple linear regression model to the car data, i.e. find the β estimates, using the parameter estimate equation for linear regression, and matrix calculations.\n\n\nCode\ncars_data &lt;- cars\n\n# Create the x variable vector for speed\nx &lt;- cbind(1, cars_data$speed)\n\n# Create the y variable vector for distance\ny &lt;- as.matrix(cars_data$dist)\n\n# Calculate the Beta parameter estimate\nbeta_hat &lt;- solve(t(x) %*% x)  %*%  t(x) %*% y\nprint(\"The parameter estimates from the matrix calculation is:\")\n\n\n[1] \"The parameter estimates from the matrix calculation is:\"\n\n\nCode\nbeta_hat\n\n\n           [,1]\n[1,] -17.579095\n[2,]   3.932409"
  },
  {
    "objectID": "PracticalOne.html#question-4",
    "href": "PracticalOne.html#question-4",
    "title": "Practical One",
    "section": "Question 4",
    "text": "Question 4\n\nCheck that you get the same  β estimates as when fitting the linear regression model using lm()\n\n\nCode\n# linear regression model of the cars dataset \nlm_model &lt;-  lm(dist ~ speed, data = cars)\n\n#Get the Beta estimate\nprint(\"The parameter estimates from the linear regression model is:\")\n\n\n[1] \"The parameter estimates from the linear regression model is:\"\n\n\nCode\ncoef(lm_model)\n\n\n(Intercept)       speed \n -17.579095    3.932409 \n\n\n\n\nExtra:\nCreate a function to calculate the beta, standard error and t-value of the linear regression model\n\n\nCode\nstats &lt;- function(x, y) {\n  n &lt;- length(y)\n  X &lt;- cbind(1, x)  # adds the intercept term\n  beta_hat &lt;- solve(t(X) %*% X) %*% (t(X) %*% y)  # calc the beta coefficient from X and y vectors\n  \n  y_hat &lt;- X %*% beta_hat\n  residuals &lt;- y - y_hat\n  sigma_sq &lt;- sum(residuals^2) / (n - 2)  # calculates the variance \n  \n  var_beta &lt;- sigma_sq * solve(t(X) %*% X)  # calculates the variance-covariance matrix\n  std_error &lt;- sqrt(diag(var_beta))  #  calculates the standard error of coefficients\n  \n  t_values &lt;- beta_hat / std_error  # calculate the t-values\n  \n  return(list(beta = beta_hat[2], std_error = std_error[2], t_value = t_values[2]))\n}\n\n\nApply the stats function to the dependent and independent variables of the cars data set\n\n\nCode\nstats(cars$speed, cars$dist)\n\n\n$beta\n[1] 3.932409\n\n$std_error\n        x \n0.4155128 \n\n$t_value\n[1] 9.46399\n\n\nCompare the above calculated statistics to the pre-coded statistics for an lm function\n\n\nCode\nsummary(lm_model)\n\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12"
  },
  {
    "objectID": "PracticalTwo.html",
    "href": "PracticalTwo.html",
    "title": "Practical Two",
    "section": "",
    "text": "# set the seed to create reproducable results\nset.seed(1)\n\n# create x as a sequence of numbers from 1 to 100\nx &lt;- 1:100\n\n# Generate y as a noisy sine wave such that yi=sin(xi/10)+ei where ei∼N(0,0.22)\ne &lt;- rnorm(100, mea = 0, sd = 0.2)\n\ny &lt;- sin(x/10) + e"
  },
  {
    "objectID": "PracticalTwo.html#generate-simulated-data",
    "href": "PracticalTwo.html#generate-simulated-data",
    "title": "Practical Two",
    "section": "",
    "text": "# set the seed to create reproducable results\nset.seed(1)\n\n# create x as a sequence of numbers from 1 to 100\nx &lt;- 1:100\n\n# Generate y as a noisy sine wave such that yi=sin(xi/10)+ei where ei∼N(0,0.22)\ne &lt;- rnorm(100, mea = 0, sd = 0.2)\n\ny &lt;- sin(x/10) + e"
  },
  {
    "objectID": "PracticalTwo.html#implement-the-lowess-algorithm",
    "href": "PracticalTwo.html#implement-the-lowess-algorithm",
    "title": "Practical Two",
    "section": "2. Implement the LOWESS Algorithm",
    "text": "2. Implement the LOWESS Algorithm\n\n# Define a function customLowess(x, y, f) that returns the smoothed values\n\ncustomLowess &lt;- function(x, y, f){\n  \n  y_smoothed &lt;- numeric(100) # creates a vector to store the smoothed y values\n  \n  for (i in 1:100) {\n    k &lt;- ceiling(f * 100) # Calculates the span\n    \n    # find the distances and get k nearest neighbors\n    distances &lt;- abs(x - x[i])\n    idx &lt;- order(distances)[1:k]\n    \n    # calculates the weights using the tricube kernel\n    dmax &lt;- max(distances[idx])\n    weights &lt;- (1 - (distances[idx] / dmax)^3)^3\n    weights[distances[idx] &gt;= dmax] &lt;- 0\n    \n    # perform weighted linear regression\n    X &lt;- cbind(1, x[idx])  # design matrix\n    W &lt;- diag(weights)  # Weight matrix\n    y_subset &lt;- y[idx]\n    \n    beta_hat &lt;- solve(t(X) %*% W %*% X) %*% (t(X) %*% W %*% y_subset)\n    \n    # Compute smoothed value\n    y_smoothed[i] &lt;- beta_hat[1] + beta_hat[2] * x[i]\n  }\n  \n  return(y_smoothed)\n  \n}"
  },
  {
    "objectID": "PracticalTwo.html#compare-with-rs-built-in-lowess",
    "href": "PracticalTwo.html#compare-with-rs-built-in-lowess",
    "title": "Practical Two",
    "section": "3. Compare with R’s Built-in lowess()",
    "text": "3. Compare with R’s Built-in lowess()\n\n# Use the built-in lowess() function with the same f value and plot both curves to compare their smoothing values\n\nplot(x = x, y = y, main = \"Lowess function\" )\nlines(lowess(x=x, y=y, f=0.25, iter = 0), col = \"red\") # displays the smoothed line by R's built-in function\nlines(x=x, y = customLowess(x=x, y=y, f=0.25), col = \"blue\")"
  },
  {
    "objectID": "PracticalThree.html",
    "href": "PracticalThree.html",
    "title": "Practical Three",
    "section": "",
    "text": "library(nycflights13)\n\nWarning: package 'nycflights13' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# using the flights dataset\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "PracticalThree.html#display-the-flights-dataset-in-an-alternative-format-to-simply-printing-it",
    "href": "PracticalThree.html#display-the-flights-dataset-in-an-alternative-format-to-simply-printing-it",
    "title": "Practical Three",
    "section": "",
    "text": "library(nycflights13)\n\nWarning: package 'nycflights13' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# using the flights dataset\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "PracticalThree.html#rewrite-the-following-code-using-dplyr-and-the-pipe.",
    "href": "PracticalThree.html#rewrite-the-following-code-using-dplyr-and-the-pipe.",
    "title": "Practical Three",
    "section": "2. Rewrite the following code using dplyr and the pipe.",
    "text": "2. Rewrite the following code using dplyr and the pipe.\nThe code that needs to be re-written:\n\nflight1 &lt;- flights[flights$month == 1, ]\ncarrier_vec &lt;- unique(flight1$carrier)\ncarrier_dist_vec_mean &lt;- numeric(length(carrier_vec))\ncarrier_dist_vec_sd &lt;- numeric(length(carrier_vec))\nfor (i in seq_along(carrier_vec)) {\n  carrier_dist_vec_mean[i] &lt;- mean(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n   )\n  carrier_dist_vec_sd[i] &lt;- sd(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n  )\n}\ndist_tbl &lt;- tibble(\n  carrier = carrier_vec,\n  mean_distance = carrier_dist_vec_mean,\n  sd_distance = carrier_dist_vec_sd\n)\ndist_tbl[order(dist_tbl$mean_distance), ]\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\nThe re-written code:\n\nlibrary(dplyr)\n\ndist_tbl &lt;- flights |&gt;\n  filter(month == 1) |&gt;\n  group_by(carrier) |&gt;\n  summarise(mean_distance = mean(distance), sd_distance = sd(distance)) |&gt;\n  arrange(mean_distance)\ndist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0"
  }
]